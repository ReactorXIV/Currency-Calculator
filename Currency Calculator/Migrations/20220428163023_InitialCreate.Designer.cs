// <auto-generated />
using System;
using Currency_Calculator.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Currency_Calculator.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220428163023_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Currency_Calculator.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("CurrencyCode");

                    b.ToTable("Currency");

                    b.HasData(
                        new
                        {
                            CurrencyCode = "EUR"
                        },
                        new
                        {
                            CurrencyCode = "USD"
                        },
                        new
                        {
                            CurrencyCode = "CHF"
                        },
                        new
                        {
                            CurrencyCode = "GBP"
                        },
                        new
                        {
                            CurrencyCode = "JPY"
                        },
                        new
                        {
                            CurrencyCode = "CAD"
                        });
                });

            modelBuilder.Entity("Currency_Calculator.CurrencyConversion", b =>
                {
                    b.Property<string>("BaseCurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("TargetCurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal>("ConversionRate")
                        .HasColumnType("decimal(18,10)");

                    b.HasKey("BaseCurrencyCode", "TargetCurrencyCode");

                    b.HasIndex("TargetCurrencyCode");

                    b.ToTable("CurrencyConversion");

                    b.HasData(
                        new
                        {
                            BaseCurrencyCode = "EUR",
                            TargetCurrencyCode = "USD",
                            ConversionRate = 1.3764m
                        },
                        new
                        {
                            BaseCurrencyCode = "EUR",
                            TargetCurrencyCode = "CHF",
                            ConversionRate = 1.2079m
                        },
                        new
                        {
                            BaseCurrencyCode = "EUR",
                            TargetCurrencyCode = "GBP",
                            ConversionRate = 0.8731m
                        },
                        new
                        {
                            BaseCurrencyCode = "USD",
                            TargetCurrencyCode = "JPY",
                            ConversionRate = 76.7200m
                        },
                        new
                        {
                            BaseCurrencyCode = "CHF",
                            TargetCurrencyCode = "USD",
                            ConversionRate = 1.1379m
                        },
                        new
                        {
                            BaseCurrencyCode = "GBP",
                            TargetCurrencyCode = "CAD",
                            ConversionRate = 1.5648m
                        });
                });

            modelBuilder.Entity("Currency_Calculator.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Username");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Username = "admin",
                            PasswordHash = new byte[] { 250, 138, 131, 1, 14, 241, 130, 209, 230, 5, 212, 0, 228, 157, 226, 99, 153, 138, 180, 158, 198, 14, 138, 199, 139, 142, 138, 10, 54, 40, 47, 14, 205, 113, 16, 210, 81, 164, 79, 222, 161, 126, 37, 123, 140, 148, 147, 226, 193, 178, 155, 17, 30, 92, 11, 212, 143, 190, 75, 233, 183, 0, 220, 111 },
                            PasswordSalt = new byte[] { 216, 178, 213, 161, 195, 240, 9, 101, 154, 255, 19, 79, 206, 249, 243, 170, 113, 131, 57, 18, 207, 95, 194, 61, 158, 148, 51, 10, 121, 38, 57, 222, 140, 237, 238, 120, 120, 154, 39, 233, 247, 147, 155, 47, 125, 90, 231, 137, 63, 90, 43, 97, 92, 108, 56, 82, 200, 124, 163, 123, 229, 232, 197, 167, 156, 201, 185, 168, 52, 84, 27, 103, 252, 12, 224, 229, 248, 197, 199, 130, 61, 131, 216, 250, 60, 205, 124, 129, 68, 96, 65, 245, 60, 82, 169, 120, 220, 190, 189, 10, 147, 249, 1, 171, 253, 0, 91, 58, 27, 59, 46, 88, 135, 124, 98, 156, 25, 123, 89, 1, 90, 123, 123, 41, 190, 11, 243, 137 }
                        });
                });

            modelBuilder.Entity("Currency_Calculator.CurrencyConversion", b =>
                {
                    b.HasOne("Currency_Calculator.Currency", "BaseCurrency")
                        .WithMany("CurrencyConversionBase")
                        .HasForeignKey("BaseCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Currency_Calculator.Currency", "TargetCurrency")
                        .WithMany("CurrencyConversionTarget")
                        .HasForeignKey("TargetCurrencyCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BaseCurrency");

                    b.Navigation("TargetCurrency");
                });

            modelBuilder.Entity("Currency_Calculator.Currency", b =>
                {
                    b.Navigation("CurrencyConversionBase");

                    b.Navigation("CurrencyConversionTarget");
                });
#pragma warning restore 612, 618
        }
    }
}
